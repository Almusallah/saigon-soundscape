// Initialize variables
let map;
let userMarker;
let selectedLocation;
let recordedBlob = null;
let mediaRecorder = null;
const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1Ijoic2lkZXdhbGtjaXR5IiwiYSI6ImNtN2c3Z28zZzBiZmsya3M3eXU2emEzOXQifQ.hLfguhn2EXIhg3XZL1_Dcw';
const STREET_STYLE_URL = 'mapbox://styles/mapbox/streets-v12';
const SATELLITE_STYLE_URL = 'mapbox://styles/mapbox/satellite-streets-v12';
const API_URL = 'https://saigon-soundscape-production.up.railway.app/api';

// DOM elements
document.addEventListener('DOMContentLoaded', () => {
    const streetViewBtn = document.getElementById('street-view-btn');
    const satelliteViewBtn = document.getElementById('satellite-view-btn');
    const recordAudioBtn = document.getElementById('record-audio');
    const stopRecordBtn = document.getElementById('stop-record');
    const audioPreview = document.getElementById('audio-preview');
    const recordingPanel = document.getElementById('recording-panel');
    const locationDisplay = document.getElementById('location-display');
    const uploadForm = document.getElementById('upload-form');

    // Initialize map
mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;

try {
    console.log('Initializing map...');
    map = new mapboxgl.Map({
        container: 'map',
        style: STREET_STYLE_URL,
        center: [106.6953, 10.7719], // Ho Chi Minh City coordinates
        zoom: 12,
        pitch: 45,
        bearing: -17.6,
        maxBounds: [
            [106.4, 10.5], // Southwest coordinates
            [107.0, 11.0]  // Northeast coordinates
        ]
    });
    
    console.log('Map initialized successfully');
    map.on('error', (e) => {
        console.error('Map error:', e);
    });
    
    map.addControl(new mapboxgl.NavigationControl());
    
    // Load existing recordings when map loads
    map.on('load', () => {
        console.log('Map loaded');
        loadRecordings();
    });
} catch (error) {
    console.error('Error initializing map:', error);
}
 
    
    // Map style switching with proper event handling
    streetViewBtn.addEventListener('click', () => {
        // Save current map state
        const currentCenter = map.getCenter();
        const currentZoom = map.getZoom();
        
        map.setStyle(STREET_STYLE_URL);
        streetViewBtn.classList.add('active');
        satelliteViewBtn.classList.remove('active');
        
        // Reload markers when style loads
        map.once('style.load', () => {
            // Restore map state
            map.setCenter(currentCenter);
            map.setZoom(currentZoom);
            // Reload markers
            loadRecordings();
        });
    });

    satelliteViewBtn.addEventListener('click', () => {
        // Save current map state
        const currentCenter = map.getCenter();
        const currentZoom = map.getZoom();
        
        map.setStyle(SATELLITE_STYLE_URL);
        satelliteViewBtn.classList.add('active');
        streetViewBtn.classList.remove('active');
        
        // Reload markers when style loads
        map.once('style.load', () => {
            // Restore map state
            map.setCenter(currentCenter);
            map.setZoom(currentZoom);
            // Reload markers
            loadRecordings();
        });
    });
    
    // Handle map clicks for recording location
    map.on('click', (e) => {
        selectedLocation = e.lngLat;
        locationDisplay.textContent = `Selected: ${selectedLocation.lat.toFixed(4)}, ${selectedLocation.lng.toFixed(4)}`;
        recordingPanel.classList.remove('hidden');
        
        // Add a marker
        if (userMarker) userMarker.remove();
        userMarker = new mapboxgl.Marker()
            .setLngLat(selectedLocation)
            .addTo(map);
    });

    // Audio recording handlers
    recordAudioBtn.addEventListener('click', startRecording);
    stopRecordBtn.addEventListener('click', stopRecording);

   // Function to start recording with better mobile support
async function startRecording() {
    try {
        // Check if browser supports getUserMedia
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('Your browser does not support audio recording');
            return;
        }
        
        console.log('Requesting audio access...');
        const stream = await navigator.mediaDevices.getUserMedia({ 
            audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true
            } 
        });
        console.log('Audio access granted');
        
        // Try different audio formats for better compatibility
        const options = {
            mimeType: 'audio/webm;codecs=opus'
        };
        
        // Check if the browser supports this format
        if (!MediaRecorder.isTypeSupported(options.mimeType)) {
            console.log('audio/webm;codecs=opus not supported, trying audio/webm');
            options.mimeType = 'audio/webm';
            
            if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                console.log('audio/webm not supported, trying audio/mp4');
                options.mimeType = 'audio/mp4';
                
                if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                    console.log('audio/mp4 not supported, using default format');
                    delete options.mimeType;
                }
            }
        }
        
        console.log('Using MIME type:', options.mimeType || 'default');
        mediaRecorder = new MediaRecorder(stream, options);
        const audioChunks = [];
        
        mediaRecorder.addEventListener('dataavailable', event => {
            console.log('Data available event, data size:', event.data.size);
            audioChunks.push(event.data);
        });
        
        mediaRecorder.addEventListener('stop', () => {
            console.log('Recording stopped, chunks:', audioChunks.length);
            recordedBlob = new Blob(audioChunks, { 
                type: options.mimeType || 'audio/webm' 
            });
            console.log('Created blob, size:', recordedBlob.size);
            const audioURL = URL.createObjectURL(recordedBlob);
            audioPreview.src = audioURL;
            audioPreview.style.display = 'block';
            
            // Stop tracks to release the microphone
            stream.getTracks().forEach(track => track.stop());
        });
        
        // Start recording
        mediaRecorder.start();
        console.log('Recording started');
        recordAudioBtn.disabled = true;
        stopRecordBtn.disabled = false;
    } catch (error) {
        console.error('Error starting recording:', error);
        alert('Failed to start recording: ' + error.message);
    }
} 
            
           
    
    // Function to stop recording
    function stopRecording() {
        if (mediaRecorder && mediaRecorder.state !== 'inactive') {
            mediaRecorder.stop();
            recordAudioBtn.disabled = false;
            stopRecordBtn.disabled = true;
        }
    }

    // Load recordings function
    async function loadRecordings() {
        try {
            // Clear existing markers
            recordingMarkers.forEach(marker => marker.remove());
            recordingMarkers = [];
            
            const response = await fetch(`${API_URL}/recordings`);
            if (!response.ok) {
                throw new Error('API response: ' + response.status);
            }
            
            const { data } = await response.json();
            console.log('Loaded recordings:', data);

            // Add markers for each recording
            data.forEach(recording => {
                // Create marker element
                const markerElement = document.createElement('div');
                markerElement.className = 'marker recording-marker';
                
                // Add marker to map
                const marker = new mapboxgl.Marker(markerElement)
                    .setLngLat(recording.location.coordinates)
                    .addTo(map);
                
                // Add popup with recording details
                const popup = new mapboxgl.Popup({ offset: 25 })
                    .setHTML(`
                        <div class="recording-popup">
                            <h3>Sound Recording</h3>
                            <p>${recording.description}</p>
                            <audio controls>
                                <source src="${recording.audioPath}" type="audio/webm">
                                Your browser does not support the audio element.
                            </audio>
                        </div>
                    `);
                
                marker.setPopup(popup);
                
                // Store marker reference for later cleanup
                recordingMarkers.push(marker);
            });
        } catch (error) {
            console.error('Error loading recordings:', error);
        }
    }

   // Handle recording upload
uploadForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!selectedLocation) {
        alert('Please select a location on the map');
        return;
    }
    
    if (!recordedBlob) {
        alert('Please record a sound first');
        return;
    }

    const description = document.getElementById('recording-description').value;

    // Create form data
    const formData = new FormData();
    formData.append('audio', recordedBlob, 'recording.webm');
    formData.append('description', description);
    formData.append('lat', selectedLocation.lat);
    formData.append('lng', selectedLocation.lng);

    try {
        console.log('Attempting to upload to:', `${API_URL}/recordings`);
        const response = await fetch(`${API_URL}/recordings`, {
            method: 'POST',
            body: formData,
            // Add these headers to help with CORS issues
            headers: {
                'Accept': 'application/json',
            },
            // Include credentials if your API uses cookies/sessions
            credentials: 'include',
        });

        console.log('Upload response status:', response.status);
        
        if (response.ok) {
            // Reload recordings to show the new marker
            loadRecordings();
            
            // Reset form and hide panel
            uploadForm.reset();
            recordingPanel.classList.add('hidden');
            audioPreview.src = '';
            audioPreview.style.display = 'none';
            recordedBlob = null;
            
            alert('Recording uploaded successfully!');
        } else {
            const errorText = await response.text();
            console.error('Server response:', errorText);
            throw new Error(`Upload failed: ${response.status} - ${errorText}`);
        }
    } catch (error) {
        console.error('Upload error details:', error);
        alert(`Failed to upload recording: ${error.message}`);
    }
});
     
    
            
